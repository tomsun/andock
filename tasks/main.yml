---

- debug: msg="Creating Docker image based on Docker-agnostic Ansible play"
- debug: var=andock_image
- debug: var=andock_role

- name: Use default `docker` path
  set_fact: andock_cmd_docker="{{Â _andock_cmd_docker }}"
  when: ansible_distribution != "MacOSX" and not andock_cmd_docker|default(False)

- name: Use default `docker` path for OS X, prefixed with a `docker-machine` based env setter
  # When Ansible targets OS X and docker-machine is used to provide local Docker functionality,
  # The Docker environment variables tend not to be set in the shell that Ansible uses.
  #
  # `docker-machine env <machine-name>` can be used to generate the appropriate variables.
  # (see defaults/main.yml for details on how _andock_cmd_docker_osx_dockermachine is composed)
  #
  # This approach is probably fragile. A possible workaround when in trouble, is to specifiy
  # andock_cmd_docker in --extra-vars
  set_fact: andock_cmd_docker="{{ _andock_cmd_docker_osx_dockermachine }}"
  when: ansible_distribution == "MacOSX" and not andock_cmd_docker|default(False)

- name: Determine Docker hostname
  set_fact: andock_docker_hostname="{{ _andock_docker_hostname }}"
  when: ansible_distribution != "MacOSX" and not andock_docker_hostname|default(False)

- name: Determine Docker hostname in OS X
  # When using docker-machine and boot2docker, the desired host is in a VM - get its ip
  shell: "{{ _andock_cmd_docker_hostname }}"
  register: andock_docker_hostname_result
  when: ansible_distribution == "MacOSX" and not andock_docker_hostname|default(False)
- name: Store docker hostname
  set_fact: andock_docker_hostname={{ andock_docker_hostname_result.stdout }}
  when: ansible_distribution == "MacOSX" and not andock_docker_hostname|default(False)
- debug: var=andock_docker_hostname
  when: ansible_distribution == "MacOSX" and not andock_docker_hostname|default(False)

- name: Perform all shell commands with a virtualenv active
  set_fact: _andock_shell_prefix="source {{ andock_virtualenv }}/bin/activate && "
  when: andock_virtualenv|default(False)

- debug: var=_andock_shell_prefix

- name: Use default `ansible-playbook` path
  set_fact: andock_cmd_ansible="{{ _andock_cmd_ansible }}"
  when: not andock_virtualenv|default(False)

- name: Use virtualenv-default `ansible-playbook` path
  set_fact: andock_cmd_ansible="{{ _andock_cmd_ansible_virtualenv }}"
  when: andock_virtualenv|default(False)

- name: Get list of Docker images known to the Docker host
  shell: >
    {{ _andock_shell_prefix|default("")}}
    {{ andock_cmd_docker }} images
  args:
    executable: "/bin/bash"
  register: andock_images
#- debug: var=andock_images.stdout_lines

- set_fact: needle="{{ andock_image }} " # append a space to avoid false positives

- name: Determine if the image we're creating already exists
  set_fact: andock_image_missing={{ andock_images.stdout.find(needle) == -1 }}

- include: build.yml
  when: andock_image_missing or andock_rebuild|default(False)
